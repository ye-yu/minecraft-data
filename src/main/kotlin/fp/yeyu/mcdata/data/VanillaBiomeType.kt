package fp.yeyu.mcdata.data

import fp.yeyu.mcdata.interfaces.ByteQueue
import fp.yeyu.mcdata.interfaces.ByteSerializable
import net.minecraft.util.registry.RegistryKey
import net.minecraft.world.biome.Biome
import net.minecraft.world.biome.BiomeKeys

enum class VanillaBiomeType(val biomeKey: RegistryKey<Biome>) : ByteSerializable {
    OCEAN(BiomeKeys.OCEAN),
    PLAINS(BiomeKeys.PLAINS),
    DESERT(BiomeKeys.DESERT),
    MOUNTAINS(BiomeKeys.MOUNTAINS),
    FOREST(BiomeKeys.FOREST),
    TAIGA(BiomeKeys.TAIGA),
    SWAMP(BiomeKeys.SWAMP),
    RIVER(BiomeKeys.RIVER),
    NETHER_WASTES(BiomeKeys.NETHER_WASTES),
    THE_END(BiomeKeys.THE_END),
    FROZEN_OCEAN(BiomeKeys.FROZEN_OCEAN),
    FROZEN_RIVER(BiomeKeys.FROZEN_RIVER),
    SNOWY_TUNDRA(BiomeKeys.SNOWY_TUNDRA),
    SNOWY_MOUNTAINS(BiomeKeys.SNOWY_MOUNTAINS),
    MUSHROOM_FIELDS(BiomeKeys.MUSHROOM_FIELDS),
    MUSHROOM_FIELD_SHORE(BiomeKeys.MUSHROOM_FIELD_SHORE),
    BEACH(BiomeKeys.BEACH),
    DESERT_HILLS(BiomeKeys.DESERT_HILLS),
    WOODED_HILLS(BiomeKeys.WOODED_HILLS),
    TAIGA_HILLS(BiomeKeys.TAIGA_HILLS),
    MOUNTAIN_EDGE(BiomeKeys.MOUNTAIN_EDGE),
    JUNGLE(BiomeKeys.JUNGLE),
    JUNGLE_HILLS(BiomeKeys.JUNGLE_HILLS),
    JUNGLE_EDGE(BiomeKeys.JUNGLE_EDGE),
    DEEP_OCEAN(BiomeKeys.DEEP_OCEAN),
    STONE_SHORE(BiomeKeys.STONE_SHORE),
    SNOWY_BEACH(BiomeKeys.SNOWY_BEACH),
    BIRCH_FOREST(BiomeKeys.BIRCH_FOREST),
    BIRCH_FOREST_HILLS(BiomeKeys.BIRCH_FOREST_HILLS),
    DARK_FOREST(BiomeKeys.DARK_FOREST),
    SNOWY_TAIGA(BiomeKeys.SNOWY_TAIGA),
    SNOWY_TAIGA_HILLS(BiomeKeys.SNOWY_TAIGA_HILLS),
    GIANT_TREE_TAIGA(BiomeKeys.GIANT_TREE_TAIGA),
    GIANT_TREE_TAIGA_HILLS(BiomeKeys.GIANT_TREE_TAIGA_HILLS),
    WOODED_MOUNTAINS(BiomeKeys.WOODED_MOUNTAINS),
    SAVANNA(BiomeKeys.SAVANNA),
    SAVANNA_PLATEAU(BiomeKeys.SAVANNA_PLATEAU),
    BADLANDS(BiomeKeys.BADLANDS),
    WOODED_BADLANDS_PLATEAU(BiomeKeys.WOODED_BADLANDS_PLATEAU),
    BADLANDS_PLATEAU(BiomeKeys.BADLANDS_PLATEAU),
    SMALL_END_ISLANDS(BiomeKeys.SMALL_END_ISLANDS),
    END_MIDLANDS(BiomeKeys.END_MIDLANDS),
    END_HIGHLANDS(BiomeKeys.END_HIGHLANDS),
    END_BARRENS(BiomeKeys.END_BARRENS),
    WARM_OCEAN(BiomeKeys.WARM_OCEAN),
    LUKEWARM_OCEAN(BiomeKeys.LUKEWARM_OCEAN),
    COLD_OCEAN(BiomeKeys.COLD_OCEAN),
    DEEP_WARM_OCEAN(BiomeKeys.DEEP_WARM_OCEAN),
    DEEP_LUKEWARM_OCEAN(BiomeKeys.DEEP_LUKEWARM_OCEAN),
    DEEP_COLD_OCEAN(BiomeKeys.DEEP_COLD_OCEAN),
    DEEP_FROZEN_OCEAN(BiomeKeys.DEEP_FROZEN_OCEAN),
    THE_VOID(BiomeKeys.THE_VOID),
    SUNFLOWER_PLAINS(BiomeKeys.SUNFLOWER_PLAINS),
    DESERT_LAKES(BiomeKeys.DESERT_LAKES),
    GRAVELLY_MOUNTAINS(BiomeKeys.GRAVELLY_MOUNTAINS),
    FLOWER_FOREST(BiomeKeys.FLOWER_FOREST),
    TAIGA_MOUNTAINS(BiomeKeys.TAIGA_MOUNTAINS),
    SWAMP_HILLS(BiomeKeys.SWAMP_HILLS),
    ICE_SPIKES(BiomeKeys.ICE_SPIKES),
    MODIFIED_JUNGLE(BiomeKeys.MODIFIED_JUNGLE),
    MODIFIED_JUNGLE_EDGE(BiomeKeys.MODIFIED_JUNGLE_EDGE),
    TALL_BIRCH_FOREST(BiomeKeys.TALL_BIRCH_FOREST),
    TALL_BIRCH_HILLS(BiomeKeys.TALL_BIRCH_HILLS),
    DARK_FOREST_HILLS(BiomeKeys.DARK_FOREST_HILLS),
    SNOWY_TAIGA_MOUNTAINS(BiomeKeys.SNOWY_TAIGA_MOUNTAINS),
    GIANT_SPRUCE_TAIGA(BiomeKeys.GIANT_SPRUCE_TAIGA),
    GIANT_SPRUCE_TAIGA_HILLS(BiomeKeys.GIANT_SPRUCE_TAIGA_HILLS),
    MODIFIED_GRAVELLY_MOUNTAINS(BiomeKeys.MODIFIED_GRAVELLY_MOUNTAINS),
    SHATTERED_SAVANNA(BiomeKeys.SHATTERED_SAVANNA),
    SHATTERED_SAVANNA_PLATEAU(BiomeKeys.SHATTERED_SAVANNA_PLATEAU),
    ERODED_BADLANDS(BiomeKeys.ERODED_BADLANDS),
    MODIFIED_WOODED_BADLANDS_PLATEAU(BiomeKeys.MODIFIED_WOODED_BADLANDS_PLATEAU),
    MODIFIED_BADLANDS_PLATEAU(BiomeKeys.MODIFIED_BADLANDS_PLATEAU),
    BAMBOO_JUNGLE(BiomeKeys.BAMBOO_JUNGLE),
    BAMBOO_JUNGLE_HILLS(BiomeKeys.BAMBOO_JUNGLE_HILLS),
    SOUL_SAND_VALLEY(BiomeKeys.SOUL_SAND_VALLEY),
    CRIMSON_FOREST(BiomeKeys.CRIMSON_FOREST),
    WARPED_FOREST(BiomeKeys.WARPED_FOREST),
    BASALT_DELTAS(BiomeKeys.BASALT_DELTAS);

    override fun serialize(writer: ByteQueue) {
        writer.push(ordinal)
    }

    companion object {
        operator fun get(biomeKey: RegistryKey<Biome>): VanillaBiomeType = values().first { it.biomeKey == biomeKey.value }
    }
}